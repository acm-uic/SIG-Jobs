169. Majority Element
Amazon Microsoft, Adobe, Apple, Google
Easy
----------------------------------------------------------
class Solution:
    def majorityElement(self, nums: list[int]) -> int:
        # Initialize an empty hash-map
        count = {}
        # Get the length of the array
        n = len(nums)
        # Iterate over each number in the array
        for num in nums:
            # If the number is not already in the map, add it with a count of 0
            if num not in count:
                count[num] = 1
            else:
                # Increment the count of the number
                count[num] += 1
            # If the count of the number is more than half the length of the array, return the number
            if count[num] > n // 2:
                return num
----------------------------------------------------------


765. Couples Holding Hands
Bloomberg
Hard
----------------------------------------------------------
class Solution:
    def minSwapsCouples(self, row: List[int]) -> int:
        
        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]
        
        def union(x, y):
            rootX = find(x)
            rootY = find(y)
            if rootX != rootY:
                parent[rootX] = rootY

        n = len(row) // 2
        parent = [i for i in range(n)]
        
        for i in range(0, len(row), 2):
            union(row[i] // 2, row[i+1] // 2)
        
        count = sum([1 for i, x in enumerate(parent) if i == find(x)])
        return n - count
